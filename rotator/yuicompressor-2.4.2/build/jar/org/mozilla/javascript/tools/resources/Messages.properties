#
# JavaScript tools messages file.
#
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Rhino code, released
# May 6, 1999.
#
# The Initial Developer of the Original Code is
# Netscape Communications Corporation.
# Portions created by the Initial Developer are Copyright (C) 1997-1999
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# the GNU General Public License Version 2 or later (the "GPL"), in which
# case the provisions of the GPL are applicable instead of those above. If
# you wish to allow use of your version of this file only under the terms of
# the GPL and not to allow others to use your version of this file under the
# MPL, indicate your decision by deleting the provisions above and replacing
# them with the notice and other provisions required by the GPL. If you do
# not delete the provisions above, a recipient may use your version of this
# file under either the MPL or the GPL.
#
# ***** END LICENSE BLOCK *****

msg.expected.string.arg =\
    Expected a string argument.

msg.class.not.found =\
    Class "{0}" not found.

msg.couldnt.open =\
    Couldn''t open file "{0}".

msg.couldnt.open.url =\
    Couldn''t open URL "{0}: {1}".

msg.no-opt =\
    Must have the org.mozilla.javascript.optimizer package available \
    to compile to class files.

msg.shell.invalid =\
    Invalid option "{0}"

msg.shell.usage =\
    Usage: java {0} [options...] [files]\n\
    Valid options are:\n\
    \    -?, -help          Displays help messages.\n\
    \    -w                 Enable warnings.\n\
    \    -version 100|110|120|130|140|150|160\n\
    \                       Set a specific language version.\n\
    \    -opt [-1|0-9]      Set optimization level.\n\
    \    -f script-filename Execute script file.\n\
    \    -e script-source   Evaluate inline script.\n\
    \    -debug             Generate debug code.\n\
    \    -strict            Enable strict mode warnings.\n\
    \    -fatal-warnings    Treat warnings as errors.


msg.help =\
    \n\
    Command                Description \n\
    =======                =========== \n\
    help()                 Display usage and help messages. \n\
    defineClass(className) Define an extension using the Java class \n\
    \                       named with the string argument. \n\
    \                       Uses ScriptableObject.defineClass(). \n\
    load(["foo.js", ...])  Load JavaScript source files named by \n\
    \                       string arguments. \n\
    loadClass(className)   Load a class named by a string argument. \n\
    \                       The class must be a script compiled to a \n\
    \                       class file. \n\
    print([expr ...])      Evaluate and print expressions. \n\
    quit()                 Quit the shell. \n\
    version([number])      Get or set the JavaScript version number. \n\
    gc()                   Runs the garbage collector.\n\
    spawn(arg)             Evaluate function or scriptname on a new thread \n\
    sync(function)         Creates a synchronized version of the function, \n\
    \                       where the synchronization object is "this" \n\
    readFile(fileName [, encoding])\n\
    \                       Returns the content of the file as a string. \n\
    \                       Encoding of the string can be optionally specified. \n\
    readUrl(url [, encoding]) \n\
    \                       Similar to readFile, reads the contents of the url.\n\
    runCommand(name ...)   Runs a specified shell command. Additional arguments are \n\
    \                       passed to the command \n\
    seal(args ...)         Seals the supplied objects \n\
    toint32(arg)           Converts the argument into a 32-bit integer \n\
    serialize(obj, fileName) \n\
    \                      Serializes an object and saves it to a file \n\
    deserialise(fileName)  Reconstructs a serialized object \n\
    environment            Returns the current environment object \n\
    history                Displays the shell command history \n\
    \n\
    For full description of all available commands see shell.html in\n\
    the docs directory of Rhino distribution.\n\

msg.warning =\
    warning: {0}

msg.format1 =\
    {0}

msg.format2 =\
    line {0}: {1}

msg.format3 =\
    "{0}", line {1}: {2}

msg.uncaughtJSException =\
    exception from uncaught JavaScript throw: {0}

msg.uncaughtEcmaError =\
    uncaught JavaScript runtime exception: {0}

msg.jsc.bad.usage =\
    Didn''t understand "{1}". \n\
    For more information, try java {0} -h

msg.jsc.usage =\
Usage: java {0} [OPTION]... SOURCE...\n\
Valid options are: \n\
\  -version VERSION   Use the specified language version.\n\
\                       VERSION should be one of 100|110|120|130|140|150|160.\n\
\  -opt LEVEL         Use optimization with the specified level.\n\
\                       LEVEL should be one of 0..9.\n\
\  -debug, -g         Include debug information.\n\
\  -nosource          Do not include source to function objects.\n\
\                       It makes f.toString() useless and violates ECMAScript\n\
\                       standard but makes generated classes smaller and\n\
\                       saves memory.\n\
\  -o CLASSNAME       Use specified name as the last component of the main\n\
\                       generated class name. When specified, only one script\n\
\                       SOURCE is allowed. If omitted, it defaults to source\n\
\                       name with stripped .js suffix.\n\
\  -package PACKAGE   Place generated classes in the specified package.\n\
\  -d DIRECTORY       Use DIRECTORY as destination directory for generated\n\
\                       classes. If omitted, it defaults to parent directory\n\
\                       of SOURCE.\n\
\  -extends CLASS     The main generated class will extend the specified\n\
\                       class CLASS.\n\
\  -implements INTERFACE1,INTERFACE2,... The main generated class will\n\
\                       implement the specified list of interfaces.\n\
\  -main-method-class CLASS Specify the class name used for main method \n\
\                       implementation. The class must have a method matching\n\
\                       "public static void main(Script sc, String[] args)"\n\
\  -help, --help, -h  Print this help and exit.\n\


msg.no.file =\
    A file name must be specified to compile.

msg.invalid.classfile.name =\
    File "{0}" is not a valid class file name.

msg.extension.not.js =\
    File "{0}" is not a valid js file name.

msg.jsfile.not.found=\
    File "{0}" not found.

msg.multiple.js.to.file =\
    Cannot compile multiple js files to "{0}".

msg.package.name =\
    "{0}" is not a valid package name.

msg.spawn.args =\
    Argument to spawn() must be a function or script.

msg.must.implement.Script =\
    Argument to loadClass() must be the name of a class that implements \
    the Script interface. Class files generated by compiling scripts \
    will implement Script.

msg.runCommand.bad.args =\
    The first argument to runCommand must be a command name.

msg.runCommand.bad.env =\
    A value of the env property of option object for runCommnad must be an \
    object.

msg.shell.seal.not.object =\
    seal function can only be applied to objects

msg.shell.seal.not.scriptable =\
    seal function supports only sealing of ScriptableObject instances

msg.shell.readFile.bad.args =\
    readFile require at least file path to be specified

msg.shell.readUrl.bad.args =\
    readUrl require at least file path to be specified

msg.shell.bad.function.scope =\
    Wrong scope object for shell function: {0}

msg.idswitch.same_string =\
    The string {0} is used second time in the switch code. \
    Previous occurrence was at line {1}

msg.idswitch.file_end_in_switch =\
    End of file inside tag {0}

msg.idswitch.bad_tag_order =\
    String switch tag {0} is not allowed here

msg.idswitch.no_end_with_value =\
    End for tag {0} can not contain value

msg.idswitch.no_value_allowed =\
    Tag {0} can not contain value

msg.idswitch.no_end_usage =\
    Tag {0} can not be used as end tag

msg.idswitch.no_file_argument =\
    File argument should be given

msg.idswitch.too_many_arguments =\
    Too many arguments are given

msg.idswitch.bad_option =\
    Invalid option {0}

msg.idswitch.bad_option_char =\
    Invalid option letter {0}

msg.idswitch.bad_invocation =\
StringIdMap: {0}\n\
For more information, try\n\
java org.mozilla.javascript.tools.idswitch.StringIdMap --help

msg.idswitch.io_error =\
StringIdMap: IO error, {0}

msg.idswitch.usage = \
Usage: java org.mozilla.javascript.tools.idswitch.StringIdMap [OPTIONS] JAVA_SOURCE_FILE\n\
Generates efficient string dispatch code in JAVA_SOURCE_FILE.\n\
The resulting Java source fragment replaces the old dispatch code.\n\
If JAVA_SOURCE_FILE is -, standard input is used for Java source and the\n\
result is sent to standard output.\n\
\n\
\  -h, --help          display this help and exit\n\
\      --version       display version information and exit\n\
\n\
Note: the original file will be overwritten without any backup actions\n\
\      and all code inside #generated# tag will be replaced by new one.

msg.idswitch.version = \
org.mozilla.javascript.tools.idswitch.StringIdMap version 0.2

