{"version":3,"file":"ext-connector.js","sources":["../../../../src/editor/extensions/ext-connector/ext-connector.js","../../../../src/editor/extensions/ext-connector/locale/en.js","../../../../src/editor/extensions/ext-connector/locale/fr.js","../../../../src/editor/extensions/ext-connector/locale/zh-CN.js"],"sourcesContent":["/**\n * @file ext-connector.js\n *\n * @license MIT\n *\n * @copyright 2010 Alexis Deveria\n * @copyright 2023 Optimistik SAS\n *\n */\n\nconst name = 'connector'\n\nconst loadExtensionTranslation = async function (svgEditor) {\n  let translationModule\n  const lang = svgEditor.configObj.pref('lang')\n  try {\n    translationModule = await import(`./locale/${lang}.js`)\n  } catch (_error) {\n    // eslint-disable-next-line no-console\n    console.warn(`Missing translation (${lang}) for ${name} - using 'en'`)\n    translationModule = await import('./locale/en.js')\n  }\n  svgEditor.i18next.addResourceBundle(lang, name, translationModule.default)\n}\n\nexport default {\n  name,\n  async init (S) {\n    const svgEditor = this\n    const { svgCanvas } = svgEditor\n    const { getElement, $id, $click, addSVGElementsFromJson } = svgCanvas\n    const { svgroot, selectorManager } = S\n    const seNs = svgCanvas.getEditorNS()\n    await loadExtensionTranslation(svgEditor)\n\n    let startX\n    let startY\n    let curLine\n    let startElem\n    let endElem\n\n    let started = false\n    let connections = []\n\n    // Save the original groupSelectedElements method\n    const originalGroupSelectedElements = svgCanvas.groupSelectedElements\n\n    // Override the original groupSelectedElements to exclude connectors\n    svgCanvas.groupSelectedElements = function (...args) {\n      // Remove connectors from selection\n      svgCanvas.removeFromSelection(document.querySelectorAll('[id^=\"conn_\"]'))\n\n      // Call the original method\n      return originalGroupSelectedElements.apply(this, args)\n    }\n\n    // Save the original moveSelectedElements method\n    const originalMoveSelectedElements = svgCanvas.moveSelectedElements\n\n    // Override the original moveSelectedElements to handle connectors\n    svgCanvas.moveSelectedElements = function (...args) {\n      // Call the original method and store its result\n      const cmd = originalMoveSelectedElements.apply(this, args)\n\n      // Update connectors\n      updateConnectors(svgCanvas.getSelectedElements())\n\n      // Return the result of the original method\n      return cmd\n    }\n\n    /**\n     * getBBintersect\n     * @param {Float} x\n     * @param {Float} y\n     * @param {module:utilities.BBoxObject} bb\n     * @param {Float} offset\n     * @returns {module:math.XYObject}\n     */\n    const getBBintersect = (x, y, bb, offset) => {\n      // Adjust bounding box if offset is provided\n      if (offset) {\n        bb = { ...bb } // Create a shallow copy\n        bb.width += offset\n        bb.height += offset\n        bb.x -= offset / 2\n        bb.y -= offset / 2\n      }\n\n      // Calculate center of bounding box\n      const midX = bb.x + bb.width / 2\n      const midY = bb.y + bb.height / 2\n\n      // Calculate lengths from (x, y) to center\n      const lenX = x - midX\n      const lenY = y - midY\n\n      // Calculate slope of line from (x, y) to center\n      const slope = Math.abs(lenY / lenX)\n\n      // Calculate ratio to find intersection point\n      let ratio\n      if (slope < bb.height / bb.width) {\n        ratio = bb.width / 2 / Math.abs(lenX)\n      } else {\n        ratio = lenY ? bb.height / 2 / Math.abs(lenY) : 0\n      }\n\n      // Calculate intersection point\n      return {\n        x: midX + lenX * ratio,\n        y: midY + lenY * ratio\n      }\n    }\n\n    /**\n     * getOffset\n     * @param {\"start\"|\"end\"} side - The side of the line (\"start\" or \"end\") where the marker may be present.\n     * @param {Element} line - The line element to check for a marker.\n     * @returns {Float} - Returns the calculated offset if a marker is present, otherwise returns 0.\n     */\n    const getOffset = (side, line) => {\n      // Check for marker attribute on the given side (\"marker-start\" or \"marker-end\")\n      const hasMarker = line.getAttribute('marker-' + side)\n\n      // Calculate size based on stroke-width, multiplied by a constant factor (here, 5)\n      // TODO: This factor should ideally be based on the actual size of the marker.\n      const size = line.getAttribute('stroke-width') * 5\n\n      // Return calculated size if marker is present, otherwise return 0.\n      return hasMarker ? size : 0\n    }\n\n    /**\n     * showPanel\n     * @param {boolean} on - Determines whether to show or hide the elements.\n     * @returns {void}\n     */\n    const showPanel = on => {\n      // Find the 'connector_rules' or create it if it doesn't exist.\n      let connRules = $id('connector_rules')\n      if (!connRules) {\n        connRules = document.createElement('style')\n        connRules.setAttribute('id', 'connector_rules')\n        document.getElementsByTagName('head')[0].appendChild(connRules)\n      }\n\n      // Update the content of <style> element to either hide or show certain elements.\n      connRules.textContent = !on\n        ? ''\n        : '#tool_clone, #tool_topath, #tool_angle, #xy_panel { display: none !important; }'\n\n      // Update the display property of the <style> element itself based on the 'on' value.\n      if ($id('connector_rules')) {\n        $id('connector_rules').style.display = on ? 'block' : 'none'\n      }\n    }\n\n    /**\n     * setPoint\n     * @param {Element} elem - The SVG element.\n     * @param {Integer|\"end\"} pos - The position index or \"end\".\n     * @param {Float} x - The x-coordinate.\n     * @param {Float} y - The y-coordinate.\n     * @param {boolean} [setMid] - Whether to set the midpoint.\n     * @returns {void}\n     */\n    const setPoint = (elem, pos, x, y, setMid) => {\n      // Create a new SVG point\n      const pts = elem.points\n      const pt = svgroot.createSVGPoint()\n      pt.x = x\n      pt.y = y\n\n      // If position is \"end\", set it to the last index\n      if (pos === 'end') {\n        pos = pts.numberOfItems - 1\n      }\n\n      // Try replacing the point at the specified position\n      pts.replaceItem(pt, pos)\n\n      // Optionally, set the midpoint\n      if (setMid) {\n        const ptStart = pts.getItem(0)\n        const ptEnd = pts.getItem(pts.numberOfItems - 1)\n        setPoint(elem, 1, (ptEnd.x + ptStart.x) / 2, (ptEnd.y + ptStart.y) / 2)\n      }\n    }\n\n    /**\n     * @param {Float} diffX\n     * @param {Float} diffY\n     * @returns {void}\n     */\n    const updatePoints = (line, conn, bb, altBB, pre, altPre) => {\n      const srcX = altBB.x + altBB.width / 2\n      const srcY = altBB.y + altBB.height / 2\n\n      const pt = getBBintersect(srcX, srcY, bb, getOffset(pre, line))\n      setPoint(line, conn.is_start ? 0 : 'end', pt.x, pt.y, true)\n\n      const pt2 = getBBintersect(pt.x, pt.y, altBB, getOffset(altPre, line))\n      setPoint(line, conn.is_start ? 'end' : 0, pt2.x, pt2.y, true)\n    }\n\n    const updateLine = (diffX, diffY) => {\n      const dataStorage = svgCanvas.getDataStorage()\n\n      for (const conn of connections) {\n        const {\n          connector: line,\n          is_start: isStart,\n          start_x: startX,\n          start_y: startY\n        } = conn\n\n        const pre = isStart ? 'start' : 'end'\n        const altPre = isStart ? 'end' : 'start'\n\n        // Update bbox for this element\n        const bb = { ...dataStorage.get(line, `${pre}_bb`) }\n        bb.x = startX + diffX\n        bb.y = startY + diffY\n\n        dataStorage.put(line, `${pre}_bb`, bb)\n\n        // Get center point of connected element\n        const altBB = dataStorage.get(line, `${altPre}_bb`)\n\n        updatePoints(line, conn, bb, altBB, pre, altPre)\n      }\n    }\n\n    // Finds connectors associated with selected elements\n    const findConnectors = (elems = []) => {\n      // Fetch data storage object from svgCanvas\n      const dataStorage = svgCanvas.getDataStorage()\n\n      // Query all connector elements (id startss with conn_)\n      const connectors = document.querySelectorAll('[id^=\"conn_\"]')\n      // Reset connections array\n      connections = []\n\n      // Loop through each connector\n      for (const connector of connectors) {\n        let addThis = false // Flag to indicate whether to add this connector\n        const parts = [] // To hold the starting and ending elements connected by the connector\n\n        // Loop through the connector ends (\"start\" and \"end\")\n        for (const [i, pos] of ['start', 'end'].entries()) {\n          // Fetch connected element and its bounding box\n          let part = dataStorage.get(connector, `c_${pos}`)\n\n          // If part is null or undefined, fetch it and store it\n          if (!part) {\n            part = document.getElementById(\n              connector.attributes['se:connector'].value.split(' ')[i]\n            )\n            dataStorage.put(connector, `c_${pos}`, part.id)\n            dataStorage.put(\n              connector,\n              `${pos}_bb`,\n              svgCanvas.getStrokedBBox([part])\n            )\n          } else {\n            // If part is already stored, fetch it by ID\n            part = document.getElementById(part)\n          }\n\n          // Add the part to the parts array\n          parts.push(part)\n        }\n\n        // Loop through the starting and ending elements connected by the connector\n        for (let i = 0; i < 2; i++) {\n          const cElem = parts[i]\n          const parents = svgCanvas.getParents(cElem?.parentNode)\n\n          // Check if the element is part of a selected group\n          for (const el of parents) {\n            if (elems.includes(el)) {\n              addThis = true\n              break\n            }\n          }\n\n          // If element is missing or parent is null, remove the connector\n          if (!cElem || !cElem.parentNode) {\n            connector.remove()\n            continue\n          }\n\n          // If element is in the selection or part of a selected group\n          if (elems.includes(cElem) || addThis) {\n            const bb = svgCanvas.getStrokedBBox([cElem])\n\n            // Add connection information to the connections array\n            connections.push({\n              elem: cElem,\n              connector,\n              is_start: i === 0,\n              start_x: bb.x,\n              start_y: bb.y\n            })\n          }\n        }\n      }\n    }\n\n    /**\n     * Updates the connectors based on selected elements.\n     * @param {Element[]} [elems] - Optional array of selected elements.\n     * @returns {void}\n     */\n    const updateConnectors = elems => {\n      const dataStorage = svgCanvas.getDataStorage()\n\n      // Find connectors associated with selected elements\n      findConnectors(elems)\n\n      if (connections.length) {\n        // Iterate through each connection to update its state\n        for (const conn of connections) {\n          const {\n            elem,\n            connector: line,\n            is_start: isStart,\n            start_x: startX,\n            start_y: startY\n          } = conn\n\n          // Determine whether the connection starts or ends with this element\n          const pre = isStart ? 'start' : 'end'\n\n          // Update the bounding box for this element\n          const bb = svgCanvas.getStrokedBBox([elem])\n          bb.x = startX\n          bb.y = startY\n          dataStorage.put(line, `${pre}_bb`, bb)\n\n          // Determine the opposite end ('start' or 'end') of the connection\n          const altPre = isStart ? 'end' : 'start'\n\n          // Retrieve the bounding box for the connected element at the opposite end\n          const bb2 = dataStorage.get(line, `${altPre}_bb`)\n\n          // Calculate the center point of the connected element\n          const srcX = bb2?.x + bb2?.width / 2\n          const srcY = bb2?.y + bb2?.height / 2\n\n          // Update the point of the element being moved\n          const pt = getBBintersect(srcX, srcY, bb, getOffset(pre, line))\n          setPoint(line, isStart ? 0 : 'end', pt.x, pt.y, true)\n\n          // Update the point of the connected element at the opposite end\n          const pt2 = getBBintersect(\n            pt.x,\n            pt.y,\n            dataStorage.get(line, `${altPre}_bb`),\n            getOffset(altPre, line)\n          )\n          setPoint(line, isStart ? 'end' : 0, pt2.x, pt2.y, true)\n        }\n      }\n    }\n\n    /**\n     * Do on reset.\n     * @returns {void}\n     */\n    const reset = () => {\n      const dataStorage = svgCanvas.getDataStorage()\n      // Make sure all connectors have data set\n      const svgContent = svgCanvas.getSvgContent()\n      const elements = svgContent.querySelectorAll('*')\n      elements.forEach(element => {\n        const conn = element.getAttributeNS(seNs, 'connector')\n        if (conn) {\n          const connData = conn.split(' ')\n          const sbb = svgCanvas.getStrokedBBox([getElement(connData[0])])\n          const ebb = svgCanvas.getStrokedBBox([getElement(connData[1])])\n          dataStorage.put(element, 'c_start', connData[0])\n          dataStorage.put(element, 'c_end', connData[1])\n          dataStorage.put(element, 'start_bb', sbb)\n          dataStorage.put(element, 'end_bb', ebb)\n          svgCanvas.getEditorNS(true)\n        }\n      })\n    }\n\n    reset()\n\n    return {\n      name: svgEditor.i18next.t(`${name}:name`),\n      callback () {\n        // Add the button and its handler(s)\n        const buttonTemplate = document.createElement('template')\n        const title = `${name}:buttons.0.title`\n        buttonTemplate.innerHTML = `\n         <se-button id=\"tool_connect\" title=\"${title}\" src=\"conn.svg\"></se-button>\n         `\n        $id('tools_left').append(buttonTemplate.content.cloneNode(true))\n        $click($id('tool_connect'), () => {\n          if (this.leftPanel.updateLeftPanel('tool_connect')) {\n            svgCanvas.setMode('connector')\n          }\n        })\n      },\n      mouseDown (opts) {\n        // Retrieve necessary data from the SVG canvas and the event object\n        const dataStorage = svgCanvas.getDataStorage()\n        const svgContent = svgCanvas.getSvgContent()\n        const { event: e, start_x: startX, start_y: startY } = opts\n        const mode = svgCanvas.getMode()\n        const {\n          curConfig: { initStroke }\n        } = svgEditor.configObj\n\n        if (mode === 'connector') {\n          // Return if the line is already started\n          if (started) return undefined\n\n          const mouseTarget = e.target\n          const parents = svgCanvas.getParents(mouseTarget.parentNode)\n\n          // Check if the target is a child of the main SVG content\n          if (parents.includes(svgContent)) {\n            // Identify the connectable element, considering foreignObject elements\n            const fo = svgCanvas.getClosest(\n              mouseTarget.parentNode,\n              'foreignObject'\n            )\n            startElem = fo || mouseTarget\n\n            // Retrieve the bounding box and calculate the center of the start element\n            const bb = svgCanvas.getStrokedBBox([startElem])\n            const x = bb.x + bb.width / 2\n            const y = bb.y + bb.height / 2\n\n            // Set the flag to indicate the line has started\n            started = true\n\n            // Create a new polyline element\n            curLine = addSVGElementsFromJson({\n              element: 'polyline',\n              attr: {\n                id: 'conn_' + svgCanvas.getNextId(),\n                points: `${x},${y} ${x},${y} ${startX},${startY}`,\n                stroke: `#${initStroke.color}`,\n                'stroke-width':\n                  !startElem.stroke_width || startElem.stroke_width === 0\n                    ? initStroke.width\n                    : startElem.stroke_width,\n                fill: 'none',\n                opacity: initStroke.opacity,\n                style: 'pointer-events:none'\n              }\n            })\n\n            // Store the bounding box of the start element\n            dataStorage.put(curLine, 'start_bb', bb)\n          }\n\n          return {\n            started: true\n          }\n        }\n\n        if (mode === 'select') {\n          // Find connectors if the mode is 'select'\n          findConnectors(opts.selectedElements)\n        }\n\n        return undefined\n      },\n      mouseMove (opts) {\n        // Exit early if there are no connectors\n        if (connections.length === 0) return\n\n        const dataStorage = svgCanvas.getDataStorage()\n        const zoom = svgCanvas.getZoom()\n        // const e = opts.event;\n        const x = opts.mouse_x / zoom\n        const y = opts.mouse_y / zoom\n        /** @todo  We have a concern if startX or startY are undefined */\n        if (!startX || !startY) return\n\n        const diffX = x - startX\n        const diffY = y - startY\n\n        const mode = svgCanvas.getMode()\n        if (mode === 'connector' && started) {\n          // const sw = curLine.getAttribute('stroke-width') * 3;\n          // Set start point (adjusts based on bb)\n          const pt = getBBintersect(\n            x,\n            y,\n            dataStorage.get(curLine, 'start_bb'),\n            getOffset('start', curLine)\n          )\n          startX = pt.x\n          startY = pt.y\n\n          setPoint(curLine, 0, pt.x, pt.y, true)\n\n          // Set end point\n          setPoint(curLine, 'end', x, y, true)\n        } else if (mode === 'select') {\n          for (const elem of svgCanvas.getSelectedElements()) {\n            if (elem && dataStorage.has(elem, 'c_start')) {\n              svgCanvas.removeFromSelection([elem])\n              elem.transform.baseVal.clear()\n            }\n          }\n          if (connections.length) {\n            updateLine(diffX, diffY)\n          }\n        }\n      },\n      mouseUp (opts) {\n        // Get necessary data and initial setups\n        const dataStorage = svgCanvas.getDataStorage()\n        const svgContent = svgCanvas.getSvgContent()\n        const { event: e } = opts\n        let mouseTarget = e.target\n\n        // Early exit if not in connector mode\n        if (svgCanvas.getMode() !== 'connector') return undefined\n\n        // Check for a foreignObject parent and update mouseTarget if found\n        const fo = svgCanvas.getClosest(mouseTarget.parentNode, 'foreignObject')\n        if (fo) mouseTarget = fo\n\n        // Check if the target is a child of the main SVG content\n        const parents = svgCanvas.getParents(mouseTarget.parentNode)\n        const isInSvgContent = parents.includes(svgContent)\n\n        if (mouseTarget === startElem) {\n          // Case: Started drawing line via click\n          started = true\n          return {\n            keep: true,\n            element: null,\n            started\n          }\n        }\n\n        if (!isInSvgContent) {\n          // Case: Invalid target element; remove the line\n          curLine?.remove()\n          started = false\n          return {\n            keep: false,\n            element: null,\n            started\n          }\n        }\n\n        // Valid target element for the end of the line\n        endElem = mouseTarget\n\n        const startId = startElem?.id || ''\n        const endId = endElem?.id || ''\n        const connStr = `${startId} ${endId}`\n        const altStr = `${endId} ${startId}`\n\n        // Prevent duplicate connectors\n        const dupe = Array.from(\n          document.querySelectorAll('[id^=\"conn_\"]')\n        ).filter(\n          conn =>\n            conn.getAttributeNS(seNs, 'connector') === connStr ||\n            conn.getAttributeNS(seNs, 'connector') === altStr\n        )\n\n        if (dupe.length) {\n          curLine.remove()\n          return {\n            keep: false,\n            element: null,\n            started: false\n          }\n        }\n\n        // Update the end point of the connector\n        const bb = svgCanvas.getStrokedBBox([endElem])\n        const pt = getBBintersect(\n          startX,\n          startY,\n          bb,\n          getOffset('start', curLine)\n        )\n        setPoint(curLine, 'end', pt.x, pt.y, true)\n\n        // Save metadata to the connector\n        dataStorage.put(curLine, 'c_start', startId)\n        dataStorage.put(curLine, 'c_end', endId)\n        dataStorage.put(curLine, 'end_bb', bb)\n        curLine.setAttributeNS(seNs, 'se:connector', connStr)\n        curLine.setAttribute('opacity', 1)\n\n        // Finalize the connector\n        svgCanvas.addToSelection([curLine])\n        svgCanvas.moveToBottomSelectedElement()\n        selectorManager.requestSelector(curLine).showGrips(false)\n\n        started = false\n        return {\n          keep: true,\n          element: curLine,\n          started\n        }\n      },\n      selectedChanged (opts) {\n        // Get necessary data storage and SVG content\n        const dataStorage = svgCanvas.getDataStorage()\n        const svgContent = svgCanvas.getSvgContent()\n\n        // Exit early if there are no connectors\n        if (!svgContent.querySelectorAll('[id^=\"conn_\"]').length) return\n\n        // If the current mode is 'connector', switch to 'select'\n        if (svgCanvas.getMode() === 'connector') {\n          svgCanvas.setMode('select')\n        }\n\n        // Get currently selected elements\n        const { elems: selElems } = opts\n\n        // Iterate through selected elements\n        for (const elem of selElems) {\n          // If the element has a connector start, handle it\n          if (elem && dataStorage.has(elem, 'c_start')) {\n            selectorManager.requestSelector(elem).showGrips(false)\n\n            // Show panel depending on selection state\n            showPanel(opts.selectedElement && !opts.multiselected)\n          } else {\n            // Hide panel if no connector start\n            showPanel(false)\n          }\n        }\n\n        // Update connectors based on selected elements\n        updateConnectors(svgCanvas.getSelectedElements())\n      },\n      elementChanged (opts) {\n        // Get the necessary data storage\n        const dataStorage = svgCanvas.getDataStorage()\n\n        // Get the first element from the options; exit early if it's null\n        let [elem] = opts.elems\n        if (!elem) return\n\n        // Reinitialize if it's the main SVG content\n        if (elem.tagName === 'svg' && elem.id === 'svgcontent') {\n          reset()\n        }\n\n        // Check for marker attributes and update offsets\n        const { markerStart, markerMid, markerEnd } = elem.attributes\n        if (markerStart || markerMid || markerEnd) {\n          curLine = elem\n          dataStorage.put(elem, 'start_off', Boolean(markerStart))\n          dataStorage.put(elem, 'end_off', Boolean(markerEnd))\n\n          // Convert lines to polyline if there's a mid-marker\n          if (elem.tagName === 'line' && markerMid) {\n            const { x1, x2, y1, y2, id } = elem.attributes\n\n            const midPt = `${(Number(x1.value) + Number(x2.value)) / 2},${\n              (Number(y1.value) + Number(y2.value)) / 2\n            }`\n            const pline = addSVGElementsFromJson({\n              element: 'polyline',\n              attr: {\n                points: `${x1.value},${y1.value} ${midPt} ${x2.value},${y2.value}`,\n                stroke: elem.getAttribute('stroke'),\n                'stroke-width': elem.getAttribute('stroke-width'),\n                'marker-mid': markerMid.value,\n                fill: 'none',\n                opacity: elem.getAttribute('opacity') || 1\n              }\n            })\n\n            elem.insertAdjacentElement('afterend', pline)\n            elem.remove()\n            svgCanvas.clearSelection()\n            pline.id = id.value\n            svgCanvas.addToSelection([pline])\n            elem = pline\n          }\n        }\n\n        // Update connectors based on the current element\n        if (elem?.id.startsWith('conn_')) {\n          const start = getElement(dataStorage.get(elem, 'c_start'))\n          updateConnectors([start])\n        } else {\n          updateConnectors(svgCanvas.getSelectedElements())\n        }\n      },\n      IDsUpdated (input) {\n        const remove = []\n        input.elems.forEach(function (elem) {\n          if ('se:connector' in elem.attr) {\n            elem.attr['se:connector'] = elem.attr['se:connector']\n              .split(' ')\n              .map(function (oldID) {\n                return input.changes[oldID]\n              })\n              .join(' ')\n\n            // Check validity - the field would be something like 'svg_21 svg_22', but\n            // if one end is missing, it would be 'svg_21' and therefore fail this test\n            if (!/. ./.test(elem.attr['se:connector'])) {\n              remove.push(elem.attr.id)\n            }\n          }\n        })\n        return { remove }\n      },\n      toolButtonStateUpdate (opts) {\n        const button = document.getElementById('tool_connect')\n        if (opts.nostroke && button.pressed === true) {\n          svgEditor.clickSelect()\n        }\n        button.disabled = opts.nostroke\n      }\n    }\n  }\n}\n","export default {\n  name: 'Connector',\n  langListTitle: 'Connect two objects',\n  langList: [\n    { id: 'mode_connect', title: 'Connect two objects' }\n  ],\n  buttons: [\n    {\n      title: 'Connect two objects'\n    }\n  ]\n}\n","export default {\n  name: 'Connecteur',\n  langListTitle: 'Connecter deux objets',\n  langList: [\n    { id: 'mode_connect', title: 'Connecter deux objets' }\n  ],\n  buttons: [\n    {\n      title: 'Connecter deux objets'\n    }\n  ]\n}\n","export default {\n  name: '连接器',\n  langListTitle: '连接两个对象',\n  langList: [\n    { id: 'mode_connect', title: '连接两个对象' }\n  ],\n  buttons: [\n    {\n      title: '连接两个对象'\n    }\n  ]\n}\n"],"names":["name","loadExtensionTranslation","svgEditor","translationModule","lang","configObj","pref","__variableDynamicImportRuntime0__","_error","console","warn","i18next","addResourceBundle","default","init","S","svgCanvas","getElement","$id","$click","addSVGElementsFromJson","svgroot","selectorManager","seNs","getEditorNS","startX","startY","curLine","startElem","endElem","started","connections","originalGroupSelectedElements","groupSelectedElements","removeFromSelection","document","querySelectorAll","_len","arguments","length","args","Array","_key","apply","originalMoveSelectedElements","moveSelectedElements","_len2","_key2","cmd","updateConnectors","getSelectedElements","getBBintersect","x","y","bb","offset","width","height","midX","midY","lenX","lenY","slope","Math","abs","ratio","getOffset","side","line","hasMarker","getAttribute","size","showPanel","on","connRules","createElement","setAttribute","getElementsByTagName","appendChild","textContent","style","display","setPoint","elem","pos","setMid","pts","points","pt","createSVGPoint","numberOfItems","replaceItem","ptStart","getItem","ptEnd","findConnectors","elems","undefined","dataStorage","getDataStorage","connectors","connector","addThis","parts","i","entries","part","get","getElementById","attributes","value","split","put","id","getStrokedBBox","push","cElem","parents","getParents","parentNode","el","includes","remove","is_start","start_x","start_y","conn","isStart","pre","altPre","bb2","srcX","srcY","pt2","reset","svgContent","getSvgContent","elements","forEach","element","getAttributeNS","connData","sbb","ebb","t","callback","buttonTemplate","title","innerHTML","append","content","cloneNode","leftPanel","updateLeftPanel","setMode","mouseDown","opts","event","e","mode","getMode","curConfig","initStroke","mouseTarget","target","fo","getClosest","attr","getNextId","stroke","color","stroke_width","fill","opacity","selectedElements","mouseMove","zoom","getZoom","mouse_x","mouse_y","mouseUp","isInSvgContent","keep","startId","endId","connStr","altStr","dupe","from","filter","setAttributeNS","addToSelection","moveToBottomSelectedElement","requestSelector","showGrips","selectedChanged","selElems","has","selectedElement","multiselected","elementChanged","tagName","markerStart","markerMid","markerEnd","Boolean","x1","x2","y1","y2","midPt","Number","pline","insertAdjacentElement","clearSelection","startsWith","start","IDsUpdated","input","map","oldID","changes","join","test","toolButtonStateUpdate","button","nostroke","pressed","clickSelect","disabled","langListTitle","langList","buttons"],"mappings":"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"}